require File.dirname(__FILE__) + '/../../spec_helper'

module Spec
  module Example
    describe ExampleGroupFactory, "with :foobar registered as custom type" do

      before do
        @behaviour = Class.new(ExampleGroup)
        ExampleGroupFactory.register(:foobar, @behaviour)
      end

      after do
        ExampleGroupFactory.reset
      end

      it "should #get the default behaviour type when passed nil" do
        ExampleGroupFactory.get(nil).should == ExampleGroup
      end

      it "should #get custom type for :foobar" do
        ExampleGroupFactory.get(:foobar).should == @behaviour
      end

      it "should #get the actual type when that is passed in" do
        ExampleGroupFactory.get(@behaviour).should == @behaviour
      end

      it "should #get nil for unregistered non-nil values" do
        ExampleGroupFactory.get(:does_not_exist).should be_nil
      end

      it "should raise error for #get! with unknown key" do
        proc do
          ExampleGroupFactory.get!(:does_not_exist)
        end.should raise_error
      end
    end    

    describe ExampleGroupFactory, "#create_example_group" do
      it "should create a uniquely named class" do
        behaviour = Spec::Example::ExampleGroupFactory.create_example_group("behaviour") {}
        behaviour.name.should =~ /Spec::Example::ExampleGroup::Subclass_\d+/
      end

      it "should create a Spec::Example::Example subclass by default" do
        behaviour = Spec::Example::ExampleGroupFactory.create_example_group("behaviour") {}
        behaviour.superclass.should == Spec::Example::ExampleGroup
      end

      it "should create a Spec::Example::Example when :type => :default" do
        behaviour = Spec::Example::ExampleGroupFactory.create_example_group(
          "behaviour", :type => :default
        ) {}
        behaviour.superclass.should == Spec::Example::ExampleGroup
      end

      it "should create a Spec::Example::Example when :behaviour_type => :default" do
        behaviour = Spec::Example::ExampleGroupFactory.create_example_group(
          "behaviour", :behaviour_type => :default
        ) {}
        behaviour.superclass.should == Spec::Example::ExampleGroup
      end

      it "should create specified type when :type => :something_other_than_default" do
        klass = Class.new(ExampleGroup) do
          def initialize(*args, &block); end
        end
        Spec::Example::ExampleGroupFactory.register(:something_other_than_default, klass)
        behaviour = Spec::Example::ExampleGroupFactory.create_example_group(
          "behaviour", :type => :something_other_than_default
        ) {}
        behaviour.superclass.should == klass
      end

      it "should create specified type when :behaviour_type => :something_other_than_default" do
        klass = Class.new(ExampleGroup) do
          def initialize(*args, &block); end
        end
        Spec::Example::ExampleGroupFactory.register(:something_other_than_default, klass)
        behaviour = Spec::Example::ExampleGroupFactory.create_example_group(
          "behaviour", :behaviour_type => :something_other_than_default
        ) {}
        behaviour.superclass.should == klass
      end
      
      it "should create a type indicated by :spec_path" do
        klass = Class.new(ExampleGroup) do
          def initialize(*args, &block); end
        end
        Spec::Example::ExampleGroupFactory.register(:something_other_than_default, klass)
        behaviour = Spec::Example::ExampleGroupFactory.create_example_group(
          "behaviour", :spec_path => "./spec/something_other_than_default/some_spec.rb"
        ) {}
        behaviour.superclass.should == klass
      end
      
      it "should create a type indicated by :spec_path (with spec_path generated by caller on windows)" do
        klass = Class.new(ExampleGroup) do
          def initialize(*args, &block); end
        end
        Spec::Example::ExampleGroupFactory.register(:something_other_than_default, klass)
        behaviour = Spec::Example::ExampleGroupFactory.create_example_group(
          "behaviour", :spec_path => "./spec\\something_other_than_default\\some_spec.rb"
        ) {}
        behaviour.superclass.should == klass
      end
      
      it "should create and register a Spec::Example::Example if :shared => true" do
        shared_example_group = Spec::Example::ExampleGroupFactory.create_example_group(
          "name", :spec_path => '/blah/spec/models/blah.rb', :behaviour_type => :controller, :shared => true
        ) {}
        shared_example_group.should be_an_instance_of(Spec::Example::SharedExampleGroup)
        SharedExampleGroup.shared_example_groups.should include(shared_example_group)
      end

      it "should favor the :behaviour_type over the :spec_path" do
        klass = Class.new(ExampleGroup) do
          def initialize(*args, &block); end
        end
        Spec::Example::ExampleGroupFactory.register(:something_other_than_default, klass)
        behaviour = Spec::Example::ExampleGroupFactory.create_example_group(
          "name", :spec_path => '/blah/spec/models/blah.rb', :behaviour_type => :something_other_than_default
        ) {}
        behaviour.superclass.should == klass
      end

      it "should register ExampleGroup by default" do
        example_group = Spec::Example::ExampleGroupFactory.create_example_group("The ExampleGroup") do
        end
        rspec_options.example_groups.should include(example_group)
      end

      it "should enable unregistering of ExampleGroups" do
        example_group = Spec::Example::ExampleGroupFactory.create_example_group("The ExampleGroup") do
          unregister
        end
        rspec_options.example_groups.should_not include(example_group)
      end
      
      after(:each) do
        Spec::Example::ExampleGroupFactory.reset
      end
    end
  end
end
