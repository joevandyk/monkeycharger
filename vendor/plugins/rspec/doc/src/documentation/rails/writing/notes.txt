
There
are two opposing forces that guide decisions about how to structure specs in relation
to the code being specified:

* Rapid Fault Isolation. When we introduce a bug in the system, we want (ideally) only ONE
spec to fail. We certainly learn something when several fail, but it is often a sign
of coupling not only in the specs, but in the design as well.

* Freedom to Refactor. When we want to change implementation without changing
behavior, we want to do so without changing specs. This is a core tenet of TDD
and an even more obvious part of our approach to BDD. Behaviour is its first name.

The tension created between these two forces is that Rapid Fault Isolation
guides us to write specs that are as close to the implementation as possible, while
Freedom to Refactor guides us to write them as far from the implementation as
possible.

BDD is all about balancing these two forces. There is no right answer as to how
to do this. The best advice we can give is to be aware of these two forces and
be aware of the effects of one pulling harder than the other.