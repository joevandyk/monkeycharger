---
title: Runner
---

h2. Executing examples directly

Any file RSpec examples can be run directly from the command line:

<pre>
$ ruby path/to/my_spec.rb [options]
</pre>

This will print the results to STDOUT. Use the --help option for more details. This is
practical when you only want to run one file. If you want to run more, use the spec
command or the Rake task.

h2. The spec command

After you install RSpec, you should have the <tt>spec</tt> command on your PATH.
This command can be used to process several files in one go. 

Any number of files, directories and shell globs can be provided, all ruby source files
that are found are loaded. To see this in action, cd to the RSpec install directory
(normally under /usr/local/lib/ruby/gems/1.8/gems/rspec-x.y.z/) and type <code>spec examples</code>:

<pre>
$ spec examples

{execute: ruby docspec.rb examples}
</pre>

Very simple and to the point. Passing examples are indicated by a '.',
failing ones by a 'F'. Note that failure indicates a violated expectation as
well as an unexpected exception being raised.  Here are examples of both:

<pre>
$ spec failing_examples/team_spec.rb

{execute: ruby docspec.rb failing_examples/pure/team_spec.rb}
</pre>

h2. Command line options

When you run <tt>spec</tt> with the <tt>--help</tt> option it prints a help message:

<pre>
$ spec --help

{execute: ruby docspec.rb --help}
</pre>

The command line options can be passed to customize the output and behaviour of RSpec.
The options apply whether specs are run in standalone mode (by executing the .rb files directly with ruby), 
or using the spec command.
